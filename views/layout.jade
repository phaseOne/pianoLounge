doctype html
html(lang='en')
  head
  block head
      meta(charset='utf-8')
      meta(name='viewport', content='width=device-width, initial-scale=1, minimal-ui')

      //title= status.station ? 'pianoLounge â€“ '+status.station : 'pianoLounge'

      != css("bootstrap")

      script(src='https://cdn.socket.io/socket.io-1.0.6.js')
      script(src='//cdnjs.cloudflare.com/ajax/libs/jquery/2.1.1/jquery.min.js')
      script(src='//cdn.jsdelivr.net/jquery.velocity/0.10.0/jquery.velocity.min.js')

      script.
        var socket = io.connect('http://localhost:3000'),
            pL = {
              progressMan: {
                id: null,
                timer: function() {
                  pL.progressMan.id = setInterval(function() {
                    pL.status.time.elapsed = Math.round((new Date().getTime() - pL.status.time.timestamp)/1000)
                    pL.status.time.remaining = Math.max(pL.status.time.duration - pL.status.time.elapsed, 0)
                    $('progress').attr('value', pL.status.time.elapsed)
                    $('.time.elapsed').text(secToString(pL.status.time.elapsed))
                    $('.time.remaining').text('-'+secToString(pL.status.time.remaining))
                  }, 500)
                }
              },
              updateTracks : function() {
                //
              }
            }

        socket.on('status', function (data) {
          pL.status = data
          console.log('status: '+pL.status.state)

          $('progress').attr('max', pL.status.time.duration)

          switch (pL.status.state) {
            case 'playing':
              pL.progressMan.timer()
              $('.i-play use').attr('xlink:href', '#i-pause')
              $('.transport .loading').removeClass('visible')
              break
            case 'ended':
            case 'paused':
              pL.status.state === 'ended' ? $('.transport .loading').addClass('visible') :  $('.transport .loading').removeClass('visible')

              $('.i-play use').attr('xlink:href', '#i-play')
              clearInterval(pL.progressMan.id)
              break
          }
        })
        socket.on('activity', function (data) {
          console.log('activity')
          console.log(data)
        })
        socket.on('stationList', function (data) {
          console.log('stationList')
          pL.stationList = data
        })
        socket.on('volume', function (data) {
          console.log(data)
        })

        $(function() {
          $('.i-play').click(function() {
            socket.emit('transport', 'playpause')
            $('.transport .loading').addClass('visible')
          })
        })

        function secToString(sec) {
          var min = Math.floor(sec / 60).pad(),
              sec = (sec % 60).pad()
          return min + ':' + sec
        }

        Number.prototype.pad = function() {
          return (this < 10) ? '0'+this : this.toString()
        }

  body
    block content
